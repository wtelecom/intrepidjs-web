[
    {
        "id": "introduction",
        "title": "Introducción",
        "text": "",
        "content": [
            {
                "id": "generalView",
                "title": "Visión general",
                "text": "<p>IntrepidJS es un framework de desarrollo web nacido para dar respuestas a las necesidades más comunes encontradas en el desarrollo de aplicaciones web. Nos permite crear aplicaciones web de manera rápida y sencilla. Gracias a esta documentación comprenderás cómo funciona y cómo puedes usar las diferentes tecnologías que lo componen para hacer de tu proyecto una realidad. La documentación está en continuo desarrollo, por lo tanto siéntete libre para hacernos saber cómo mejorarla. IntrepidJS se ha liberado bajo la licencia <a href='http://opensource.org/licenses/MIT'>MIT</a>.<p>",
                "content": []
            },
            {
                "id": "requirements",
                "title": "Requisitos",
                "text": "<pre>Para empezar a usar IntrepidJS, </pre><p><pre>necesitas instalar algunas herramientas en tu sistema.</pre></p><ul><li><h3>Node.js</h3><p>Es un entorno de programación en la capa del servidor basado en el lenguaje de programación Javascript, es asíncrono, con I/O de datos en una arquitectura orientada a eventos y basado en el motor Javascript V8 de Google. Para instalarlo en un sistema basado en Debian debes ejecutar los siguientes comandos:</p></li></ul>",
                "content": []
            }
        ]
    },
    {
        "id": "tutorial",
        "title": "Tutorial",
        "text": "",
        "content": [
            {
                "id": "firstSteps",
                "title": "Primeros pasos: instalación",
                "text": "<p>Para empezar a utilizar <em>IntrepidJS</em> necesitarás configurarlo en tu máquina. Para ejecutar el servidor, lo primero es instalar las herramientas <em>nodejs</em>, <em>npm</em>, <em>mongodb</em> y <em>redis-server</em></p>. Para ello debesejecutar: <pre>sudo apt-get update &amp;&amp; sudo apt-get install nodejs npm redis-server mongodb</pre> <p><a href='requirements' target='_blank'>Aquí</a> puedes profundizar sobre más detalles sobre los requisitos básicos</p> <p>A continuación crearemos nuestra primera aplicación <em>IntrepidJS</em>. Se trata de <em>intrepidjs-cli</em>, y la instalaremos usando npm:</p> <pre>npm update &amp;&amp; sudo npm install -g intrepidjs-cli</pre> <p>Ya tienes instalado todo lo necesario para comenzar. </p> <p>El siguiente paso es usar el comando <em>intrepidjs-cli</em>  instalado con el paquete <em>intrepidjs-cli</em>. Este comando clona desde nuestro <a href='https://github.com/wtelecom/intrepidjs/' target='_blank'>repositorio git</a> la última versión del código y hace otras cosas mágicas por nosotros.</p> <p>Para crear tu primera aplicación de IntrepidJS es suficiente con ejecutar:</p> <pre>mkdir intrepidjs &amp;&amp cd intrepidjs intrepidjs-init myApp</pre> <p>Si no se especifica un nombre el comando <em>intrepidjs-init</em>dará a la aplicación el nombre intrepidjs. Para nuestro ejemplo, el nombre de la aplicación es myApp</p> <p>Una vez ejecutado lo anterior, el comando mostrará el mensaje <code>Express server listening on port 8000</code> Y ya tienes puedes disponible tu aplicación:</p> <p><a href='http://localhost:8000/' target='_blank'>http://localhost:8000</a></p>",
                "content": []
            },
            {
                "id": "userCreation",
                "title": "Creación de usuarios",
                "text": "<p>En una consola, muévete al directorio en el que hayas creado tu aplicación de IntrepidJS (en el caso de que hayas hecho el tutorial, la carpeta será myApp) y ejecuta el siguiente comando:</p> <pre>$ node app.js</pre> <p>En un navegador, abre la siguiente ruta: <pre><a href='http://localhost:8000/' target='_blank'>http://localhost:8000</a></pre> Para crear un usuario sólo necesitas hacer clic en Singup en la esquina derecha y rellenar el formulario (username, email y contraseña).</p> <p>Ten cuidado ya que el primer usuario que crees ser el administrador de tu aplicación.</p>",
                "content": []
            },
            {
                "id": "firstIntrepidJS",
                "title": "Mi primer servidor IntrepidJS",
                "text": "<p>En este tutorial veremos las funcionalidades principales del panel de control</p> <p>Para ello abre una consola y ve al directorio dónde esté tu aplicación. <pre>cd myApp</pre>Ahora inicia el servidor de node <pre>$ nodemon app.js</pre></p> <p>Log in the application with the administrator user, and then click on your username on the topright corner. You will see a menu with several options, click on 'control panel'. In the control panel, you can see on the left several tabs: <ul> <li>Dashboard: To see your modules and statistics about the number of users registered.</li> <li>Users: To see the list of registered users and define their roles</li> <li>Modules: To activate and desactivate main modules and also your custom modules</li> <li>Highlights: To change your home page. Be aware that in the first frame, you can only put UI elements</li> <li>Appearance: To change the style of your application</li> <li>UI element: To manage the UI widget(activate/desactivate, etc)</li> <li>Social networks: To manage the social widget(activate/desactivate, etc)</li> </ul> </p> <p>It is important at this point to understand the difference between a module and a widget: <ul> <li>A widget is embedded in the IntrepidJS core, and so you can use it everywhere, and, for instance, in any modules.</li> <li>A module is designed to do one specific task in one place. A module isn’t as 'global' as a widget.</li> </ul> </p>",
                "content": []
            },
            {
                "id": "firstBlog",
                "title": "Mi primer modulo: un blog",
                "text": "<p>You will now see how easy it is to create your own custom module with IntrepidJS. You will see this by creating your own blog. This tutorial requires that you previously installed IntrepidJs and all its required dependencies. If it is not the case, please follow this tutorial. HTML: poner enlace Primeros pasos</p> <p>Move into the folder 'myApp' and execute the following commands:</p> <pre>$ ./make.js createmodule blog</pre> <p>This command will create a new module named 'blog', You can find all the files for this module in the folder modules/blog.  In order to be able to activate/desactivate it, you have to modified the file settings.js in the folder 'myApp', by adding the name of your modules in the modules to export:</p> <pre>// Modules to load exports.modules = [ 'blog' ];</pre> <p>Launch the server with the command.</p> <pre>$ node app.js</pre> <p>Now, in the control panel of your application, if you go to the Modules page, you will see the custom Modules 'Blog'. Activate it. Log out and then restart the server. You will now see in the top of your browser that there is a new tab named 'Blog'. Click on it in order to switch your current page. This new page simply display the name of your module, in this case 'Blog' .</p> <p>We will start by creating the schemas and models of your blog, in order to save the different posts of your Blog. Go to the folder 'modules/blog/data/schemas' and add the file 'post.js' with the following lines:</p> <pre>/** * @file Blog.js * Blogspace Blog schema * @desc MongoDB Blog object schema */ var mongoose = require('mongoose'), rek = require('rekuire'), _ = require('underscore'); var postSchema = new mongoose.Schema({ author: { type: mongoose.Schema.Types.ObjectId, ref: 'Account' }, title: String, text: String, created: {type: Date, default: Date.now } }); module.exports = postSchema; }); module.exports = postSchema;</pre> <p>This will create a schema with four fields: -an author, which is a reference to the account model -a title -the content of the post -the date of creation</p> <p>You know have to create the corresponding model in the folder 'modules/blog/data/models'. Add the following lines to a new file named 'post.js':</p> <pre>/** * @file Blog.js * Blogspace Blog model * @desc MongoDB Blog object model */ var mongoose = require('mongoose'), rek = require('rekuire'), moduleSchema = rek('modules/blog/data/schemas/post'), schema = mongoose.model('Blog', moduleSchema); module.exports = schema;</pre> <p>You will now create the view in order to be able to create new posts. Go to the folder 'modules/blog/views/', and edit the file 'index.jade' by adding the following lines to the existing one (which only shows the name of the module):</p> <pre>form.form-inline(ng-submit='createPost()') input.form-control(type='text', ng-model='formData.title', placeholder='title') input.form-control(type='text', ng-model='formData.text', placeholder='text') button(type='submit').btn.btn-default Send</pre> <p>This create two fields, one for the title and another for the content, and a button 'Send' to create the post. For the moment it doesn’t do anything because the associated controllers doesn’t do anything. Move into the folder 'modules/blog/public/javascripts/controllers/' and edit the file 'index_controller.js' by adding the following lines:</p> <pre>angular.module('IntrepidJS').controller('BlogIndexController', [ '$scope', '$state', 'restService', function ($scope, $state, restService) { $scope.formData = {}; restService.get({}, apiPrefix + '/blog/post', function(data) { $scope.posts = data.objects; }); $scope.createPost = function () { restService.post($scope.formData, apiPrefix + '/blog/post/create', function(data) { $scope.posts.push(data.objects); $scope.formData = {}; }); }; } ]);</pre> <p>This code does two things: First, it get all the existing post in order to display them Second, it creates and stores a post when you click on the button 'Send'</p> <p>Stop and restart the server with the following command </p> <pre>$ node app</pre> <p>Now, if you reload the page of your module, you can see that when you create a 'post' by clicking on the 'send' button, a POST request is sent. We will now add the code in order to be able to see the existing posts.  Open the file modules/blog/views/index.jade and add the following lines to the existing one:</p> <pre>hr .row(ng-repeat='p in posts') .col-xs-6 h4 {{p.title}} p {{p.text}} .col-xs-6 pre {{p | json}} alert.alert.alert-warning.col-xs-12(ng-if='!posts') There isn’t any post</pre> <p>When there is some posts in the database, this code creates two columns, the left one with the title and the content of the post, and the right one the document as it is stored in the mongoDB database. Otherwise, You will see the message “There isn’t any post”. You can add post and directly see them in the page of your module</p> <p>Now, we will show post in the highlight of your module. First, modify the file 'highlights.jade' in the folder modules/blog/views/partials/</p> <pre>div(ng-controller='BlogHLC') h1 Blog .row(ng-repeat='p in posts') .col-xs-12.well h4 {{p.title}} p {{p.text}} alert.alert.alert-warning.col-xs-12(ng-if='!posts') No hay posts</pre> <p>This will display the different post with another controller named 'BlogHLC'. So we need to create it. Modify the file 'index_controller.js' in the folder modules/blog/public/javascripts/controllers/ by adding the following lines:</p> <pre>/** * @desc  Blog Index controller * @param object $scope - The controller scope var * @param object $state - The controller state route var */ angular.module('IntrepidJS').controller('BlogHLC', [ '$scope', '$state', 'restService', function ($scope, $state, restService) { $scope.formData = {}; restService.get({ options: {'sort': '-created'} }, apiPrefix + '/blog/post', function(data) { $scope.posts = data.objects; }); } ]); </pre> <p>This controller will get all the existing posts and sorts them by their creation date.</p> <p>In order to see the posts in your home page, the last thing is to add your module in the highlight.  On your browser, click on your username, then on control panel and finally go to the 'Highlights' tab. On the right of the screen, in the category 'Modules', you can now see the name of your module. Click, drag and drop it on the second frame and go to your home page (more details about this in the following tutorial ENLACE: siguiente punto widgets)). You can now see your different posts ordered by their date of creation.</p> <p>Congratulations!  If you want to learn more about the modules, go to ENLACE: modules documentation</p>",
                "content": []
            },
            {
                "id": "widgets",
                "title": "Widgets",
                "text": "<p>By default, all the applications IntrepidJS are created with two main modules (un chat et un email), one UI widget (a carousel) and one social widget (a timeline for a twitter account). If you want to activate/desactivate predefined modules, move to 'modules'. In order to activate/desactivate predefined widgets, go to 'UI elements' or 'Social networks'.</p> <ul> <li> <h3>Carrusel </h3> <p>In order to change your home page, activate the 'carousel' module in 'UI elements' by clicking on the button 'off' at the right of the name 'carousel', and then go to 'Highlights'.  There is now a the 'carousel' module in the UI element category. To see it in your home page, click, drag and drop it in the first frame. This frame is an UI frame only. Once done, you can see it in your home page. if you want to add images to your carousel, go back to 'UI elements' and click on the button 'show actions' at the right of the name 'carousel', you will have a window in order to add your photos.</p> </li> <li> <h3>Twitter timeline</h3> <p>In the same way, you can activate the twitter timeline by going to the 'social elements' category and activate it by clicking on the button 'off' at the right of the name 'Twitter timeline'. Then, click on Show actions and complete the required fields. As you did for the carousel, go to 'highlights' and click, drag and drop the frame 'twitter timeline' where you want the twitter timeline to be shown.  On your home page, you know have a carousel of images and a twitter timeline.</p> </li> </ul> <p>If you want to learn how to create your own widgets, go to HTML: enlace widget documentacion.</p> </div>",
                "content": []
            }
        ]
    },
    {
        "id": "devGuide",
        "title": "Guía de desarrollo",
        "text": "",
        "content": [
            {
                "id": "dirStructure",
                "title": "Estructura de directorios",
                "text": "<p>IntrepidJS sigue un patrón estructural rígido, aunque es modificable en ciertos aspectos, se debe respetar la estructura mientras sea posible puesto que ésta ha sido diseñada para el correcto funcionamiento de todas las partes.</p> <h3>Estructura principal:</h3> <h4>data</h4> <p> En esta carpeta se guarda la información referente a los modelos de datos de la aplicación.<br /> Se compone de dos carpetas internas.  </p> <h5>Models</h5> <p>Al exportar un modelo en esta carpeta automáticamente se genera una API 'al vuelo'. La sintaxis para exportar un nuevo modelo se basa en los esquemas definidos en Moongose y es como en el siguiente ejemplo: <pre> var setting = mongoose.model('Setting', settingSchema);<br /> module.exports = setting; </pre> </p> <h5>Schemas</h5> <p> Esta carpeta contiene los modelos de datos que se definen para la base de datos de MongoDB, al igual que en cualquier aplicación que use <a href='http://mongoosejs.com/docs/guide.html'> mongoose</a>.  </p> <h4>libs</h4> <p> En esta carpeta se guarda el contenido referente a utilidades que se necesiten para los controladores o para cualquier parte de la aplicación. Sirven como soporte y ayuda para la creación de módulos en el backend.  </p> <h4>locales</h4> <p> En esta carpeta se guardan los archivos para hacer la internalización.  Por defecto IntrepidJS utiliza 2 locales, es y en. <br /> El motor de plantillas actual es Jade, y por tanto, al utilizar dentro de cualquier fichero Jade la sintaxis: <pre> label= __(‘Some text’) </pre> Automáticamente se incluirá la cadena “Some text” en cada uno de los archivos locales para su posterior traducción en internalización.  </p> <h4>middlewares</h4> <p> En esta carpeta se almacenan todos los middlewares que se quieran utilizar en las peticiones a la API. Estos middlewares ayudan a componer las consultas de la API de manera modular y a mantener el código bien organizado.  </p> <h4>modules</h4> <p> Dado que IntrepidJS es el core de todo el framework, dispone de una carpeta específica para módulos que se desarrollen sobre él y se guardan en la carpeta módulos. <br /> Cada módulo tiene la misma estructura que un intrepidJS, pero aplicada a cada módulo y al ser un módulo no necesita configurar nada referente al servidor de express ya que de eso se encarga el propio IntrepidJS.  </p> <h4>public</h4> <p> En esta carpeta se guarda todo lo referente al front-end y se compone de 4 subcarpetas: </p> <h5>files</h5> <p> Se utiliza para guardar los ficheros que se vayan a utilizar. Por ejemplo, las imágenes por defecto para los perfiles de usuario.  </p> <h5>javascripts</h5> <p> Guarda todo lo referente a javascript para el front-end y principalmente todos los archivos de AngularJS con una <a href='http://scotch.io/tutorials/javascript/angularjs-best-practices-directory-structure#standard-structure'>estructura estándar de AngularJS</a> </p> <h5>stylessheets</h5> <p> Esta carpeta contiene los archivos referentes a estilos css.  </p> <h5>vendor</h5> <p> Esta carpeta contiene los archivos adicionales utilizados en el front-end para el renderizado de la web más. Algunos componentes vienen predefinidos a con las versiones que se utilizan en IntrepidJS por defecto como, por ejemplo, la versión de Angular, pero también dispone de un archivo bower.json con el que se pueden configurar dependencias adicionales.  </p> <h4>routes</h4> <p> IntrepidJS utiliza ui-router para las rutas de la aplicación web y en esta carpeta se encuentran los archivos que configuran cada una de estas rutas y el funcionamiento de las mismas.  </p> <h4>utils</h4> <p> Esta carpeta contiene código con las utilidades generales que provee por defecto IntrepidJS.  </p> <h4>views</h4> <p>El motor de templates que utiliza IntrepidJS es Jade y en esta carpeta se guardan todos los templates que se utilizan IntrepidJS, tanto para las páginas generales de la aplicación como para los highlights.  </p> <h4>widgets</h4> <p> En IntrepidJS se pueden definir widget para añadirlos en la pantalla principal o en cualquier vista. Estos widgets tienen por defecto carácter social y por defecto, de momento, sólo está desarrollado el widget para el timeline de Twitter.  </p>",
                "content": []
            },
            {
                "id": "backend",
                "title": "Backend",
                "text": "<h3>data</h3> <p>En esta carpeta se encuentra toda la información necesaria para la definición y manejo de la información de la aplicación mediante el uso de los modelos definidos en MongoDB</p> <p>Dentro de esta carpeta hay dos subcarpetas:<p> <ul> <li><b>models:</b> conecta el modelo definido en schemas para la creación de la API crud al vuelo.  </li> <li><b>schemas:</b> define los modelos de MongoDB y las operaciones que se pueden realizar sobre los mismo al igual que se hace en cualquier aplicación que utilice moongose.  </li> </ul> <p>Ambos subdirectorios tienen los mismos directorios que se corresponden con los modelos de MongoDB que estan definidos: </p> <ul> <li><b>admin/settings</b>: define los modelos de carácter general como <i>main_modules, modules, themes</i>.  </li> <li><b>blog</b>: define los modelos del blog que tiene por defecto para ser utilizado por cualquier módulo.  </li> <li><b>chat</b>: define los modelos necesarios para el chat interno de IntrepidJS como por ejemplo el modelo de mensaje.  </li> <li> <b>mail</b>: define los modelos del módulo de manejo de email interno.  </li> <li> <b>user</b>: define los modelos de los usuarios y cuentas de usuario de IntrepidJS.  </li> <li><b>widget</b>: define los modelos para el manejo de los widgets en el sistema ya que se guarda la configuración de cada uno en la base de datos.</li> </ul> <h3>libs</h3> <p>Una librería es un software utilizado para realizar operaciones específicas en nuestro backend, éstas pueden ser utilizadas en cualquier lugar y deben ser abstractas.<br /> Normalmente son utilizadas como soporte de módulos en el backend.<br /> El core de IntrepidJS posee algunas librerías fundamentales para su funcionamiento, son las siguientes: <ul> <li> <h4>libs/load_modules</h4> <p>Esta librería es invocada desde el archivo <b>app.js</b>, su función principal es registrar los módulos disponibles en el sistema e informar sobre su estado actual, si el módulo está activo, se cargan los archivos necesarios para que pueda ser usado.  <br /> Es una de las librerías más importantes del core de IntrepidJS puesto que no sólo se encarga de cargar los módulos, también genera las rutas que el módulo necesita para su funcionamiento.  <br /> Esta librería tiene una dependencia directa con el archivo app.js de cada módulo que deseemos cargar en nuestra instancia de IntrepidJS.  </p> </li> <li> <h4>libs/load_resources</h4> <p>Esta librería es invocada desde el archivo <b>app.js</b>, su función principal es hacer visible todos los archivos públicos de los módulos disponibles en el sistema.  </p> </li> <li> <h4>libs/load_site_params</h4> <p>Esta librería es invocada desde el archivo <b>app.js</b>, su función principal es exponer los datos públicos de nuestra instancia IntrepidJS, como por ejemplo, el título de la instancia.  </p> </li> <li> <h4>libs/load_site_widgets</h4> <p>Esta librería es invocada desde el archivo <b>app.js</b>, su función principal es registrar los widgets disponibles en el sistema e informar sobre su estado actual, si el widget está activo, se cargan los archivos necesarios para que pueda ser usado.  <br /> Es una de las librerías más importantes del core de IntrepidJS puesto que no sólo se encarga de cargar los widgets, también genera las rutas que el widget necesita para su funcionamiento.  <br /> Esta librería tiene una dependencia directa con el archivo app.js de cada widget que deseemos cargar en nuestra instancia de IntrepidJS.  </p> </li> <li> <h4>Directorio libs/crud_api_operations</h4> <p>Este directorio contiene las librerías encargadas de proveer la funcionalidad CRUD a las APIs que se crean al vuelo.  <br /> Es una de los elementos más importantes del core de IntrepidJS puesto que de este directorio depende el correcto funcionamiento del front-end de nuestra instancia. Es el encargado de la creación de todas las rutas que se crean para el uso de la API.  <br /> Esta librería tiene una dependencia directa con el archivo routes/dynamic_apis_routes.js. Este archivo es el encargado de importar las librerías del directorio y asignar el funcionamiento de ellas a cada uno de los esquemas presentes en los módulos.  </p> </li> </ul> <p> Es importante tener en cuenta que las librerías que vayan a ser usadas en nuestros módulos deben permanecer en el directorio <b>libs</b> de la estructura de directorios del módulo.  </p> <h3>locales</h3> <h3>Middlewares</h3> <p>Un middleware es un software que se ejecuta interceptando una petición.</p> <p>En nuestro caso los middlewares se utilizan para hacer operaciones o añadir información a la respuesta de cada petición que se hace en ExpressJS (normalmente desde el front-end con  AngularJS)</p> <p>Un ejemplo de cómo actúa un middleware en IntrepidJS lo tenemos a continuación: Queremos conocer si existe un usuario haciendo una petición con el identificador del usuario desde una llamada a la API.</p> <p>En el servidor debemos recibir la petición, obtener la información del usuario y, si hay información del mismo, responder a la petición diciendo que el usuario está en el sistema.</p> <p>Por un lado tenemos una ruta que se utiliza para preguntar al servidor si existe un usuario y se hace de la siguiente forma:</p>",
                "content": []
            },
            {
                "id": "frontend",
                "title": "Frontend",
                "text": "",
                "content": []
            }
        ]
    },
    {
        "id": "security",
        "title": "Seguridad",
        "text": "",
        "content": [
            {
                "id": "roles",
                "title": "Gestión de roles y perfiles",
                "text": "",
                "content": []
            }
        ]
    },
    {
        "id": "cli",
        "title": "CLI",
        "text": "",
        "content": [
            {
                "id": "interpidjs_cli",
                "title": "Interpidjs-cli",
                "text": "",
                "content": []
            },
            {
                "id": "make_js",
                "title": "Make.js",
                "text": "",
                "content": []
            }
        ]
    },
    {
        "id": "roadmap",
        "title": "Roadmap",
        "text": "",
        "content": []
    }
]
